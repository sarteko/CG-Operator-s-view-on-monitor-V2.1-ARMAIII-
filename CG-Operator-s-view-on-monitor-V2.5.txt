// ============================================================================
// CONFIGURAZIONE SYNC MULTI-MONITOR
// ============================================================================
ARTEK_OperatorCam_SyncConfig = [
    // Formato: ["monitor_master", ["monitor_slave_1", "monitor_slave_2", ...]]
    ["operatorcam", ["operatorcam1", "operatorcam2"]]
    // Aggiungi altre configurazioni se necessario:
    // ,["operatorcam_base", ["operatorcam_base1", "operatorcam_base2"]]
    // ,["operatorcam_torre", ["operatorcam_torre1"]]
];

// Funzione per ottenere i monitor slave di un master
ARTEK_fnc_getSlaveMonitors = {
    params ["_masterVarName"];
    private _slaves = [];
    {
        if ((_x select 0) == _masterVarName) exitWith {
            _slaves = _x select 1;
        };
    } forEach ARTEK_OperatorCam_SyncConfig;
    _slaves
};

// Funzione per verificare se un monitor è un master
ARTEK_fnc_isMasterMonitor = {
    params ["_varName"];
    private _isMaster = false;
    {
        private _masterName = _x select 0;
        if (_masterName == _varName) exitWith {
            _isMaster = true;
        };
    } forEach ARTEK_OperatorCam_SyncConfig;
    _isMaster
};

// Funzione per sincronizzare il feed su tutti i monitor collegati (solo se comando dal master)
ARTEK_fnc_syncSlaveMonitors = {
    params ["_masterMonitor", "_operator", "_start"];
    
    private _masterVarName = vehicleVarName _masterMonitor;
    private _slaveVarNames = [_masterVarName] call ARTEK_fnc_getSlaveMonitors;
    
    {
        private _slaveMonitor = missionNamespace getVariable [_x, objNull];
        if (!isNull _slaveMonitor) then {
            if (_start) then {
                [_slaveMonitor, _operator] call ARTEK_fnc_startOperatorFeed;
            } else {
                [_slaveMonitor] call ARTEK_fnc_stopOperatorFeed;
            };
        };
    } forEach _slaveVarNames;
};

// Funzione per verificare se un oggetto deve essere inizializzato come monitor
ARTEK_fnc_shouldInitMonitor = {
    params ["_varName"];
    private _shouldInit = false;
    
    // Controlla se è un master
    {
        if ((_x select 0) == _varName) exitWith {
            _shouldInit = true;
        };
    } forEach ARTEK_OperatorCam_SyncConfig;
    
    // Controlla se è uno slave
    if (!_shouldInit) then {
        {
            private _slaves = _x select 1;
            {
                if (_x == _varName) exitWith {
                    _shouldInit = true;
                };
            } forEach _slaves;
            if (_shouldInit) exitWith {};
        } forEach ARTEK_OperatorCam_SyncConfig;
    };
    
    _shouldInit
};

// ============================================================================
// CODICE ORIGINALE
// ============================================================================

if (isNil "ARTEK_OperatorCam_Index") then { ARTEK_OperatorCam_Index = 0; };  
if (isNil "ARTEK_OperatorCam_Initialized") then { ARTEK_OperatorCam_Initialized = false; };  
 
ARTEK_fnc_selectOperatorDialog = { 
    params ["_title", "_options", "_onConfirm", "_onCancel", "_params"]; 
    if (!hasInterface) exitWith {}; 
    private _display = findDisplay 46 createDisplay "RscDisplayEmpty"; 
    private _background = _display ctrlCreate ["RscText", -1]; 
    _background ctrlSetPosition [0.3, 0.2, 0.4, 0.6]; 
    _background ctrlSetBackgroundColor [0, 0, 0, 0.8]; 
    _background ctrlCommit 0; 
    private _titleCtrl = _display ctrlCreate ["RscStructuredText", -1]; 
    _titleCtrl ctrlSetPosition [0.3, 0.21, 0.4, 0.05]; 
    _titleCtrl ctrlSetStructuredText parseText format["<t align='center' size='1.2' color='#006cff'>%1</t>", _title]; 
    _titleCtrl ctrlCommit 0; 
    private _listBox = _display ctrlCreate ["RscListBox", 1500]; 
    _listBox ctrlSetPosition [0.32, 0.28, 0.36, 0.42]; 
    _listBox ctrlSetBackgroundColor [0.1, 0.1, 0.1, 0.9]; 
    _listBox ctrlCommit 0; 
    { 
        private _index = _listBox lbAdd (_x select 0); 
        _listBox lbSetColor [_index, _x select 1]; 
    } forEach _options; 
    _listBox lbSetCurSel 0; 
    private _confirmBtn = _display ctrlCreate ["RscButton", 1600]; 
    _confirmBtn ctrlSetPosition [0.32, 0.72, 0.17, 0.05]; 
    _confirmBtn ctrlSetText "Confirm"; 
    _confirmBtn ctrlSetBackgroundColor [0, 0.42, 1, 0.8]; 
    _confirmBtn ctrlSetTextColor [1, 1, 1, 1]; 
    _confirmBtn ctrlCommit 0; 
    private _cancelBtn = _display ctrlCreate ["RscButton", 1601]; 
    _cancelBtn ctrlSetPosition [0.51, 0.72, 0.17, 0.05]; 
    _cancelBtn ctrlSetText "Cancel"; 
    _cancelBtn ctrlSetBackgroundColor [0.1, 0.1, 0.3, 0.8]; 
    _cancelBtn ctrlSetTextColor [1, 1, 1, 1]; 
    _cancelBtn ctrlCommit 0; 
    _confirmBtn ctrlAddEventHandler ["ButtonClick", { 
        params ["_ctrl"]; 
        private _display = ctrlParent _ctrl; 
        private _listBox = _display displayCtrl 1500; 
        private _selected = lbCurSel _listBox; 
        private _onConfirm = _display getVariable ["onConfirm", {}]; 
        private _params = _display getVariable ["params", []]; 
        [_selected] + _params call _onConfirm; 
        _display closeDisplay 1; 
    }]; 
    _cancelBtn ctrlAddEventHandler ["ButtonClick", { 
        params ["_ctrl"]; 
        private _display = ctrlParent _ctrl; 
        private _onCancel = _display getVariable ["onCancel", {}]; 
        private _params = _display getVariable ["params", []]; 
        _params call _onCancel; 
        _display closeDisplay 2; 
    }]; 
    _display setVariable ["onConfirm", _onConfirm]; 
    _display setVariable ["onCancel", _onCancel]; 
    _display setVariable ["params", _params]; 
}; 
  
ARTEK_fnc_getOperatorsWithCamera = {  
    allUnits select {  
        (side _x == west || side _x == civilian) &&  
        alive _x &&  
        !isNull _x &&  
        ([_x, ["ItemcTabHCam"]] call cTab_fnc_checkGear || "ItemcTabHCam" in (items _x))  
    }  
};  
  
ARTEK_fnc_getOperatorTextureIndex = { 0 };  
  
ARTEK_fnc_startOperatorFeed = {  
    params ["_monitor", "_operator"];  
    private _textureIndex = [_monitor] call ARTEK_fnc_getOperatorTextureIndex;  
    private _renderTarget = _monitor getVariable ["operatorRenderTarget", "rendertarget0"];  
    private _cam = "camera" camCreate [0,0,0];  
    _cam cameraEffect ["internal", "back", _renderTarget];  
    _monitor setObjectTextureGlobal [_textureIndex, "#(argb,512,512,1)r2t(" + _renderTarget + ",1.0)"];  
    _monitor setVariable ["operatorCam", _cam, false];  
    _monitor setVariable ["connectedOperator", _operator, true];  
    _monitor setVariable ["operatorFeedActive", true, true];  
 
    [_monitor] spawn {  
        params ["_monitor"];  
        private _cam = _monitor getVariable ["operatorCam", objNull];  
        while {_monitor getVariable ["operatorFeedActive", false] && !isNull _cam} do {  
            private _operator = _monitor getVariable ["connectedOperator", objNull];  
            if (isNull _operator || !alive _operator ||   
                !([_operator, ["ItemcTabHCam"]] call cTab_fnc_checkGear || "ItemcTabHCam" in (items _operator))) exitWith {  
                [_monitor] call ARTEK_fnc_stopOperatorFeed;  
            };  
            private _eyePos = eyePos _operator;  
            private _eyeDir = eyeDirection _operator;  
            private _adjustedPos = _eyePos vectorAdd ((_eyeDir vectorMultiply 0.08) vectorAdd [-0.162, -0.015, -0.01]);  
            _cam setPosASL _adjustedPos;  
            _cam setVectorDirAndUp [_eyeDir, [0,0,1]];  
            _cam camSetFov 0.85;  
            _cam camCommit 0;  
            sleep 0.01;  
        };  
        if (!isNull _cam) then {  
            _cam cameraEffect ["terminate", "back"];  
            camDestroy _cam;  
        };  
    };  
};  
  
ARTEK_fnc_stopOperatorFeed = {  
    params ["_monitor"];  
    _monitor setVariable ["operatorFeedActive", false, true];  
    private _cam = _monitor getVariable ["operatorCam", objNull];  
    if (!isNull _cam) then {  
        _cam cameraEffect ["terminate", "back"];  
        camDestroy _cam;  
    };  
    private _textureIndex = [_monitor] call ARTEK_fnc_getOperatorTextureIndex;  
    _monitor setObjectTextureGlobal [_textureIndex, ""];  
    _monitor setVariable ["connectedOperator", objNull, true];  
};  
  
ARTEK_fnc_syncOperatorMonitorState = {  
    params ["_monitorNetId", "_operatorNetId", "_start", ["_syncSlaves", false]];  
    private _monitor = objectFromNetId _monitorNetId;  
    private _operator = objectFromNetId _operatorNetId;  
    if (isNull _monitor) exitWith {};  
    
    if (_start) then {  
        if (!isNull _operator) then {  
            [_monitor, _operator] call ARTEK_fnc_startOperatorFeed;
            // Sincronizza anche i monitor slave SOLO se syncSlaves è true (comando dal master)
            if (_syncSlaves) then {
                [_monitor, _operator, true] call ARTEK_fnc_syncSlaveMonitors;
            };
        };  
    } else {  
        [_monitor] call ARTEK_fnc_stopOperatorFeed;
        // Disconnetti anche i monitor slave SOLO se syncSlaves è true (comando dal master)
        if (_syncSlaves) then {
            [_monitor, objNull, false] call ARTEK_fnc_syncSlaveMonitors;
        };
    };  
};  
  
ARTEK_fnc_initOperatorCam = {  
    params ["_monitor"];  
    removeAllActions _monitor;  
 
    private _renderIndex = ARTEK_OperatorCam_Index mod 4;  
    ARTEK_OperatorCam_Index = ARTEK_OperatorCam_Index + 1;  
    _monitor setVariable ["operatorRenderTarget", format["rendertarget%1", _renderIndex], true];  
    _monitor setVariable ["operatorFeedActive", false, true];  
    
    // Determina se questo monitor è un master
    private _isMaster = [vehicleVarName _monitor] call ARTEK_fnc_isMasterMonitor;
 
    if (hasInterface) then {  
 
        _monitor addAction ["Select Operator", { 
            params ["_target", "_caller"]; 
            private _operators = call ARTEK_fnc_getOperatorsWithCamera; 
            if (count _operators == 0) exitWith { hintSilent "No operators with cameras available"; }; 
 
            private _operatorList = []; 
            { 
                private _dist = round (_caller distance _x); 
                private _color = if (side _x == civilian) then {[0.5, 0, 0.5, 1]} else {[0, 0.42, 1, 1]}; 
                _operatorList pushBack [format["%1 (%2m)", name _x, _dist], _color, _x]; 
            } forEach _operators; 
            
            private _isMaster = [vehicleVarName _target] call ARTEK_fnc_isMasterMonitor;
 
            [ 
                "Select Operator", 
                _operatorList, 
                { 
                    params ["_choice", "_target", "_operatorList", "_isMaster"]; 
                    private _selectedOperator = (_operatorList select _choice) select 2; 
                    [[netId _target, netId _selectedOperator, true, _isMaster], "ARTEK_fnc_syncOperatorMonitorState", true, false] call BIS_fnc_MP; 
                }, 
                {}, 
                [_target, _operatorList, _isMaster] 
            ] call ARTEK_fnc_selectOperatorDialog; 
        }, nil, 1.5, true, true, "", "(_target distance _this < 3) && !(_target getVariable ['operatorFeedActive',false]) && (isPlayer _this) && (side _this in [west,civilian])"]; 
 
 
        _monitor addAction ["Change Operator", { 
            params ["_target", "_caller"]; 
            private _operators = call ARTEK_fnc_getOperatorsWithCamera; 
            if (count _operators == 0) exitWith { hintSilent "No operators with cameras available"; }; 
 
            private _operatorList = []; 
            { 
                private _dist = round (_caller distance _x); 
                private _color = if (side _x == civilian) then {[0.5, 0, 0.5, 1]} else {[0, 0.42, 1, 1]}; 
                _operatorList pushBack [format["%1 (%2m)", name _x, _dist], _color, _x]; 
            } forEach _operators; 
            
            private _isMaster = [vehicleVarName _target] call ARTEK_fnc_isMasterMonitor;
 
            [ 
                "Change Operator", 
                _operatorList, 
                { 
                    params ["_choice", "_target", "_operatorList", "_isMaster"]; 
                    private _selectedOperator = (_operatorList select _choice) select 2; 
                    // Disconnetti prima solo se è master, altrimenti cambia direttamente
                    if (_isMaster) then {
                        [_target, _selectedOperator, _isMaster] spawn {
                            params ["_target", "_selectedOperator", "_isMaster"];
                            [[netId _target, "", false, _isMaster], "ARTEK_fnc_syncOperatorMonitorState", true, false] call BIS_fnc_MP;
                            sleep 0.1;
                            [[netId _target, netId _selectedOperator, true, _isMaster], "ARTEK_fnc_syncOperatorMonitorState", true, false] call BIS_fnc_MP;
                        };
                    } else {
                        [[netId _target, netId _selectedOperator, true, _isMaster], "ARTEK_fnc_syncOperatorMonitorState", true, false] call BIS_fnc_MP;
                    };
                }, 
                {}, 
                [_target, _operatorList, _isMaster] 
            ] call ARTEK_fnc_selectOperatorDialog; 
        }, nil, 1.4, true, true, "", "(_target distance _this < 3) && (_target getVariable ['operatorFeedActive',false]) && (isPlayer _this) && (side _this in [west,civilian])"]; 
 
 
        _monitor addAction ["Disconnect Camera", { 
            params ["_target"]; 
            private _isMaster = [vehicleVarName _target] call ARTEK_fnc_isMasterMonitor;
            [[netId _target, "", false, _isMaster], "ARTEK_fnc_syncOperatorMonitorState", true, false] call BIS_fnc_MP; 
        }, nil, 1.2, true, true, "", "(_target distance _this < 3) && (_target getVariable ['operatorFeedActive',false]) && (isPlayer _this) && (side _this in [west,civilian])"]; 
    }; 
};  
  
if (isServer) then {  
    ARTEK_OperatorCam_Initialized = true;  
    publicVariable "ARTEK_OperatorCam_Initialized";  
};  
  
// Inizializzazione automatica di tutti i monitor (master e slave) definiti nella config
{
    private _masterVarName = _x select 0;
    private _slaveVarNames = _x select 1;
    
    // Inizializza il master
    private _masterMonitor = missionNamespace getVariable [_masterVarName, objNull];
    if (!isNull _masterMonitor) then {
        [_masterMonitor] call ARTEK_fnc_initOperatorCam;
    };
    
    // Inizializza tutti gli slave
    {
        private _slaveMonitor = missionNamespace getVariable [_x, objNull];
        if (!isNull _slaveMonitor) then {
            [_slaveMonitor] call ARTEK_fnc_initOperatorCam;
        };
    } forEach _slaveVarNames;
    
} forEach ARTEK_OperatorCam_SyncConfig;